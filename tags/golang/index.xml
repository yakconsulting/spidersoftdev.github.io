<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang on SpiderSoft</title><link>https://www.spidersoft.com.au/tags/golang/</link><description>Recent content in Golang on SpiderSoft</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 24 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.spidersoft.com.au/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Binary compression still alive ‚Äì golang binary compression.</title><link>https://www.spidersoft.com.au/2018/binary-compression-still-alive-golang-binary-compression/</link><pubDate>Wed, 07 Mar 2018 14:34:57 +0000</pubDate><guid>https://www.spidersoft.com.au/2018/binary-compression-still-alive-golang-binary-compression/</guid><description>&lt;p&gt;In the ancient times, when I was coding mostly in Pascal ‚Äì size did matter. People were using RAR to shave couple kilobytes from archives, and having 2mb executable was better then having 4mb executable file. In that beautiful time we used¬† 
 
 
 
 
 &lt;a href="https://upx.github.io/"&gt;UPX&lt;/a&gt;
 ‚Äì I wasn‚Äôt aware that this project is still alive, and works nicely with binaries create bo go lang.&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Ultimate Packer for eXecutables
Copyright (C) 1996 - 2017
UPX 3.94 Markus Oberhumer, Laszlo Molnar &amp;amp; John Reiser May 12th 2017

File size Ratio Format Name
-------------------- ------ ----------- -----------
11512772 -&amp;gt; 3547792 30.82% macho/amd64 main

Packed 1 file.
&lt;/code&gt;&lt;/pre&gt;</description></item><item><title>How to choose the right technology for your next project</title><link>https://www.spidersoft.com.au/2017/how-to-choose-the-right-technology-for-your-next-project/</link><pubDate>Fri, 31 Mar 2017 06:41:56 +0000</pubDate><guid>https://www.spidersoft.com.au/2017/how-to-choose-the-right-technology-for-your-next-project/</guid><description>&lt;p&gt;People quite often asking me about &lt;em&gt;technology stack&lt;/em&gt;, and where to go with next big project. The answer isn‚Äôt simple ‚Äì it depends. Usually, we have couple components which are critical for the whole system. If we are talking about a web-based solution or any API we have to decide about DATABASE, then we have STORAGE, moving on ‚Äì some BACKEND service language.&lt;/p&gt;</description></item><item><title>TOTP security tokens and 2-Step Verification</title><link>https://www.spidersoft.com.au/2015/totp-security-tokens-and-2-step-verification/</link><pubDate>Tue, 07 Jul 2015 05:37:35 +0000</pubDate><guid>https://www.spidersoft.com.au/2015/totp-security-tokens-and-2-step-verification/</guid><description>&lt;p&gt;&lt;strong&gt;Time-based One-time Password Algorithm&lt;/strong&gt;¬†(&lt;strong&gt;TOTP&lt;/strong&gt;) is an algorithm that computes a¬† 
 
 
 
 
 &lt;a href="https://en.wikipedia.org/wiki/One-time_password" title="One-time password"&gt;one-time password&lt;/a&gt;
 ¬†from a¬† 
 
 
 
 
 &lt;a href="https://en.wikipedia.org/wiki/Shared_secret" title="Shared secret"&gt;shared secret key&lt;/a&gt;
 ¬†and the current time. The most popular implementation of this solution is¬†&lt;strong&gt;Google Authenticator.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This application that implements¬† 
 
 
 
 
 &lt;a href="https://en.wikipedia.org/wiki/Time-based_One-time_Password_Algorithm" title="Time-based One-time Password Algorithm"&gt;TOTP&lt;/a&gt;
 ¬† 
 
 
 
 
 &lt;a href="https://en.wikipedia.org/wiki/Security_token#Mobile_device_tokens" title="Security token"&gt;security tokens&lt;/a&gt;
 . Usually is branded as ‚Äú 
 
 
 
 
 &lt;a href="https://en.wikipedia.org/wiki/Two-step_verification" title="Two-step verification"&gt;Two-step verification&lt;/a&gt;
 {.mw-redirect}‚Äù (or 2-Step Verification). Authenticator provides a six- to eight-digit¬† 
 
 
 
 
 &lt;a href="https://en.wikipedia.org/wiki/One-time_password" title="One-time password"&gt;one-time password&lt;/a&gt;
 ¬†which users must provide in addition to their username and password to log into various¬†services or other sites.&lt;/p&gt;</description></item><item><title>Using Google Cloud storage with AWS libraries in GO LANG</title><link>https://www.spidersoft.com.au/2015/google-cloud-storage-with-aws-libraries-go-lang/</link><pubDate>Fri, 15 May 2015 01:08:15 +0000</pubDate><guid>https://www.spidersoft.com.au/2015/google-cloud-storage-with-aws-libraries-go-lang/</guid><description>&lt;p&gt; 
 
 
 
 
 &lt;a href="https://cloud.google.com/storage/docs/overview"&gt;Google Cloud storage&lt;/a&gt;
 ¬†it‚Äôs Google answer to [Amazon S3][1]¬†service. As long one of them is very popular üòâ Second wasn‚Äôt so successful amongst developers due to quite complex processes around service. Amazon is super simple, and developer friendly ‚Äì Google‚Ä¶ well not so easy. So the questions ‚Äì why you may consider using GS instead of well documented, and super easy S3. Not many people realise but Google Cloud Storage is 
 
 
 
 
 &lt;a href="http://www.cloudberrylab.com/blog/amazon-s3-azure-and-google-cloud-prices-compare/"&gt;actually cheaper&lt;/a&gt;
 . The other reason to use Google Storage is having different provider as a backup solution. Anyway ‚Äì let‚Äôs show how easy is to use GS with existing S3 libraries.&lt;/p&gt;</description></item><item><title>MongoDB vs MySQL using golang</title><link>https://www.spidersoft.com.au/2014/mongodb-vs-mysql-using-golang/</link><pubDate>Mon, 01 Sep 2014 04:48:36 +0000</pubDate><guid>https://www.spidersoft.com.au/2014/mongodb-vs-mysql-using-golang/</guid><description>&lt;p&gt;I‚Äôm the guy who like to test. Benchmark is my‚Ä¶ middle name. You can find dozens articles about speed one or other solution. I mean 
 
 
 
 
 &lt;a href="http://www.mongodb.org/"&gt;MongoDB&lt;/a&gt;
 and 
 
 
 
 
 &lt;a href="http://www.mysql.com/"&gt;MySQL&lt;/a&gt;
 . I tried MongoDB couple times, and each time I¬†wasn‚Äôt ¬†moved by it speed. Got project coming in, when I have to deal with large amount of concurrent connection. It‚Äôs not very big, but bigger then casual MySQL load.&lt;/p&gt;
&lt;p&gt;So‚Ä¶ how did I test ‚Äì very dump way. Got 2 tables, one around 11k records, second one close to 200k record. Not much. Fields were indexed in both MySQL and MongoDB. And then i run benchmarks. First one had string fields, second one numeric.&lt;/p&gt;</description></item><item><title>Live code reload in golang</title><link>https://www.spidersoft.com.au/2014/live-code-reload-in-golang/</link><pubDate>Mon, 25 Aug 2014 04:46:44 +0000</pubDate><guid>https://www.spidersoft.com.au/2014/live-code-reload-in-golang/</guid><description>&lt;p&gt;Recompiling 
 
 
 
 
 &lt;a href="http://golang.org/"&gt;go language&lt;/a&gt;
 ¬†code during development is bit annoying task. But there is an package for that. Actually I found at least 3:&lt;/p&gt;</description></item><item><title>Reading unknown JSON object in go language</title><link>https://www.spidersoft.com.au/2014/reading-unknown-json-object-in-go-language/</link><pubDate>Mon, 18 Aug 2014 07:19:08 +0000</pubDate><guid>https://www.spidersoft.com.au/2014/reading-unknown-json-object-in-go-language/</guid><description>&lt;p&gt;Exploring [The Go Language][1] is so much fun. Everything is brand new, and different then any other language. This time I‚Äôm going to show quick snippet which shows how to read JSON object with unknown structure, and map elements to something like hash table.&lt;/p&gt;</description></item><item><title>Fetch page with proxy using The Go language</title><link>https://www.spidersoft.com.au/2014/fetch-page-with-proxy-using-the-go-language/</link><pubDate>Wed, 13 Aug 2014 06:16:24 +0000</pubDate><guid>https://www.spidersoft.com.au/2014/fetch-page-with-proxy-using-the-go-language/</guid><description>&lt;p&gt;For a while i‚Äôm playing with 
 
 
 
 
 &lt;a href="http://golang.org/"&gt;The Go Programming Language&lt;/a&gt;
 ‚Äì so far I loved it. I figure out that I‚Äôll push some code snippets from time to time.&lt;br&gt;
Today I¬†spend some time creating simple not ever crawler, but website fetcher.&lt;/p&gt;
&lt;p&gt;Idea is very simple ‚Äì download page, run xpath query on it and spit out results. I was looking for decent xpath library for Go and couldn‚Äôt find any. I tried to use 
 
 
 
 
 &lt;a href="http://gopkg.in/xmlpath.v2"&gt;xmlpath&lt;/a&gt;
 but it sucks. I couldn‚Äôt even run queries like &lt;code&gt;id('product-details')/div[@class='product-price']&amp;quot;&lt;/code&gt; Then I found something nicer ‚Äì 
 
 
 
 
 &lt;a href="https://github.com/moovweb/gokogiri"&gt;Gokogiri&lt;/a&gt;
 ‚Äì which works pretty nicely, but ‚Äì couldn‚Äôt find any examples except this 
 
 
 
 
 &lt;a href="https://www.moovweb.com/blog/gokogiri-the-best-way-to-parse-xml-in-go/"&gt;small article&lt;/a&gt;
 .&lt;/p&gt;
&lt;p&gt;The only problem with running Gokogiri is that it uses &lt;code&gt;libxml2&lt;/code&gt; which is not a huge problem on Linux based systems, but on Mac OS X you have to install it via 
 
 
 
 
 &lt;a href="http://brew.sh/"&gt;homebrew&lt;/a&gt;
 &lt;br&gt;
&lt;code&gt;brew install libxml2&lt;/code&gt;&lt;/p&gt;</description></item></channel></rss>